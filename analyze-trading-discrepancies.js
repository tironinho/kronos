const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-role-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function analyzeTradingDiscrepancies() {
  console.log('üîç AN√ÅLISE DE DISCREP√ÇNCIAS: LOGS vs BANCO DE DADOS\n');
  console.log('============================================================\n');

  try {
    // 1. Ler logs e extrair oportunidades
    console.log('1Ô∏è‚É£ ANALISANDO LOGS...');
    const logContent = fs.readFileSync('log_history.txt', 'utf8');
    
    // Extrair oportunidades dos logs
    const opportunityMatches = logContent.match(/‚úÖ .* ADICIONADO com sucesso! Decision: \{"action":"(BUY|SELL)","size":([0-9.]+)\}/g);
    
    const opportunitiesFromLogs = [];
    if (opportunityMatches) {
      opportunityMatches.forEach(match => {
        const symbolMatch = match.match(/‚úÖ (.*?) ADICIONADO/);
        const actionMatch = match.match(/"action":"(BUY|SELL)"/);
        const sizeMatch = match.match(/"size":([0-9.]+)/);
        
        if (symbolMatch && actionMatch && sizeMatch) {
          opportunitiesFromLogs.push({
            symbol: symbolMatch[1],
            action: actionMatch[1],
            size: parseFloat(sizeMatch[1]),
            timestamp: new Date().toISOString() // Aproximado
          });
        }
      });
    }
    
    console.log(`   üìä Oportunidades encontradas nos logs: ${opportunitiesFromLogs.length}`);
    opportunitiesFromLogs.forEach(opp => {
      console.log(`     - ${opp.symbol}: ${opp.action} ${opp.size}`);
    });

    // 2. Buscar trades no banco de dados
    console.log('\n2Ô∏è‚É£ ANALISANDO BANCO DE DADOS...');
    const { data: dbTrades, error } = await supabase
      .from('real_trades')
      .select('*')
      .order('opened_at', { ascending: false });

    if (error) {
      throw error;
    }

    const allDbTrades = dbTrades || [];
    const openDbTrades = allDbTrades.filter(t => t.status === 'open');
    const closedDbTrades = allDbTrades.filter(t => t.status === 'closed');

    console.log(`   üìä Total de trades no banco: ${allDbTrades.length}`);
    console.log(`   üìä Trades abertas: ${openDbTrades.length}`);
    console.log(`   üìä Trades fechadas: ${closedDbTrades.length}`);

    // 3. Comparar oportunidades vs trades executadas
    console.log('\n3Ô∏è‚É£ COMPARANDO OPORTUNIDADES vs TRADES EXECUTADAS...');
    
    const recentOpportunities = opportunitiesFromLogs.slice(-10); // √öltimas 10 oportunidades
    const recentDbTrades = allDbTrades.slice(0, 10); // √öltimas 10 trades do banco
    
    console.log('\n   üìã √öLTIMAS OPORTUNIDADES DOS LOGS:');
    recentOpportunities.forEach((opp, idx) => {
      console.log(`     ${idx + 1}. ${opp.symbol}: ${opp.action} ${opp.size}`);
    });
    
    console.log('\n   üìã √öLTIMAS TRADES DO BANCO:');
    recentDbTrades.forEach((trade, idx) => {
      console.log(`     ${idx + 1}. ${trade.symbol}: ${trade.side} ${trade.quantity} (${trade.status})`);
    });

    // 4. Identificar discrep√¢ncias
    console.log('\n4Ô∏è‚É£ IDENTIFICANDO DISCREP√ÇNCIAS...');
    
    const discrepancies = [];
    
    // Verificar se h√° oportunidades nos logs que n√£o est√£o no banco
    recentOpportunities.forEach(opp => {
      const matchingTrade = recentDbTrades.find(trade => 
        trade.symbol === opp.symbol && 
        trade.side === opp.action &&
        Math.abs(trade.quantity - opp.size) < 0.1
      );
      
      if (!matchingTrade) {
        discrepancies.push({
          type: 'OPPORTUNITY_NOT_EXECUTED',
          symbol: opp.symbol,
          action: opp.action,
          size: opp.size,
          description: `Oportunidade ${opp.symbol} ${opp.action} ${opp.size} encontrada nos logs mas n√£o executada`
        });
      }
    });

    // Verificar se h√° trades no banco que n√£o est√£o nos logs recentes
    recentDbTrades.forEach(trade => {
      const matchingOpportunity = recentOpportunities.find(opp => 
        opp.symbol === trade.symbol && 
        opp.action === trade.side &&
        Math.abs(opp.size - trade.quantity) < 0.1
      );
      
      if (!matchingOpportunity) {
        discrepancies.push({
          type: 'TRADE_NOT_IN_LOGS',
          symbol: trade.symbol,
          side: trade.side,
          quantity: trade.quantity,
          status: trade.status,
          description: `Trade ${trade.symbol} ${trade.side} ${trade.quantity} no banco mas n√£o encontrada nos logs recentes`
        });
      }
    });

    console.log(`\n   üö® Discrep√¢ncias encontradas: ${discrepancies.length}`);
    discrepancies.forEach((disc, idx) => {
      console.log(`     ${idx + 1}. ${disc.description}`);
    });

    // 5. An√°lise de problemas
    console.log('\n5Ô∏è‚É£ AN√ÅLISE DE PROBLEMAS...');
    
    // Verificar se h√° execu√ß√µes de trades nos logs
    const executionMatches = logContent.match(/üöÄ Executando trade:/g);
    console.log(`   üìä Tentativas de execu√ß√£o nos logs: ${executionMatches ? executionMatches.length : 0}`);
    
    // Verificar erros de execu√ß√£o
    const errorMatches = logContent.match(/‚ùå Erro no ciclo de trading/g);
    console.log(`   üìä Erros no ciclo de trading: ${errorMatches ? errorMatches.length : 0}`);
    
    // Verificar se o trading est√° rodando
    const tradingStarted = logContent.includes('Trading Futures iniciado com sucesso');
    console.log(`   üìä Trading iniciado: ${tradingStarted ? 'Sim' : 'N√£o'}`);
    
    // Verificar loop principal
    const loopRunning = logContent.includes('Ciclo de trading - verificando oportunidades');
    console.log(`   üìä Loop principal rodando: ${loopRunning ? 'Sim' : 'N√£o'}`);

    // 6. Recomenda√ß√µes
    console.log('\n6Ô∏è‚É£ RECOMENDA√á√ïES...');
    
    if (discrepancies.length > 0) {
      console.log('   üö® PROBLEMAS IDENTIFICADOS:');
      discrepancies.forEach(disc => {
        console.log(`     - ${disc.description}`);
      });
    }
    
    if (executionMatches && executionMatches.length === 0) {
      console.log('   ‚ö†Ô∏è PROBLEMA CR√çTICO: Nenhuma execu√ß√£o de trade encontrada nos logs');
      console.log('     - Verificar se o loop principal est√° executando trades');
      console.log('     - Verificar se h√° erros impedindo a execu√ß√£o');
    }
    
    if (errorMatches && errorMatches.length > 0) {
      console.log('   ‚ö†Ô∏è PROBLEMA: Erros no ciclo de trading detectados');
      console.log('     - Verificar logs de erro para identificar causa');
      console.log('     - Verificar conectividade com APIs');
    }

    console.log('\n‚úÖ AN√ÅLISE CONCLU√çDA!\n');

  } catch (error) {
    console.error('‚ùå Erro na an√°lise:', error);
  }
}

analyzeTradingDiscrepancies();
