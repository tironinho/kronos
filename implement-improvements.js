const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://vvfuruydocgexxdzdilh.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ2ZnVydXlkb2NnZXh4ZHpkaWxoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MTMzNTM4MSwiZXhwIjoyMDc2OTExMzgxfQ.Mu3nFA50b2EhdynjSSv7tCIPwmiNS55ba6mOHfY6T4g';

const supabase = createClient(supabaseUrl, supabaseKey);

async function implementImprovements() {
  console.log('üîß IMPLEMENTANDO MELHORIAS BASEADAS NAS MELHORES PR√ÅTICAS\n');
  console.log('=' .repeat(60));

  // 1. An√°lise de Confian√ßa Anormal
  console.log('\nüìä 1. CORRE√á√ÉO DE CONFIAN√áA ANORMAL');
  console.log('-'.repeat(40));
  
  const { data: tradesData, error: tradesError } = await supabase
    .from('real_trades')
    .select('*')
    .order('opened_at', { ascending: false });

  if (tradesError) {
    console.error('‚ùå Erro ao buscar trades:', tradesError);
    return;
  }

  // Identificar trades com confian√ßa anormal (>100%)
  const abnormalConfidenceTrades = tradesData?.filter(t => parseFloat(t.confidence || 0) > 100) || [];
  
  if (abnormalConfidenceTrades.length > 0) {
    console.log(`‚ö†Ô∏è Encontradas ${abnormalConfidenceTrades.length} trades com confian√ßa anormal`);
    
    // Corrigir confian√ßa anormal (dividir por 100 se > 100)
    for (const trade of abnormalConfidenceTrades) {
      const correctedConfidence = parseFloat(trade.confidence || 0) / 100;
      
      const { error: updateError } = await supabase
        .from('real_trades')
        .update({ confidence: correctedConfidence })
        .eq('trade_id', trade.trade_id);
      
      if (updateError) {
        console.error(`‚ùå Erro ao corrigir confian√ßa da trade ${trade.trade_id}:`, updateError);
      } else {
        console.log(`‚úÖ Corrigida confian√ßa da trade ${trade.trade_id}: ${trade.confidence}% ‚Üí ${correctedConfidence.toFixed(2)}%`);
      }
    }
  } else {
    console.log('‚úÖ Nenhuma trade com confian√ßa anormal encontrada');
  }

  // 2. Implementar Timeout para Trades Abertas
  console.log('\nüìä 2. IMPLEMENTA√á√ÉO DE TIMEOUT PARA TRADES ABERTAS');
  console.log('-'.repeat(40));
  
  const openTrades = tradesData?.filter(t => t.status === 'open') || [];
  const now = new Date();
  const timeoutHours = 24; // 24 horas de timeout
  
  let closedByTimeout = 0;
  
  for (const trade of openTrades) {
    const openedAt = new Date(trade.opened_at);
    const hoursOpen = (now - openedAt) / (1000 * 60 * 60);
    
    if (hoursOpen > timeoutHours) {
      console.log(`‚è∞ Trade ${trade.trade_id} (${trade.symbol}) aberta h√° ${hoursOpen.toFixed(1)}h - aplicando timeout`);
      
      const { error: closeError } = await supabase
        .from('real_trades')
        .update({ 
          status: 'closed',
          closed_at: now.toISOString(),
          reason: 'timeout',
          pnl: parseFloat(trade.pnl || 0),
          pnl_percent: parseFloat(trade.pnl_percent || 0)
        })
        .eq('trade_id', trade.trade_id);
      
      if (closeError) {
        console.error(`‚ùå Erro ao fechar trade por timeout ${trade.trade_id}:`, closeError);
      } else {
        console.log(`‚úÖ Trade ${trade.trade_id} fechada por timeout`);
        closedByTimeout++;
      }
    }
  }
  
  if (closedByTimeout === 0) {
    console.log('‚úÖ Nenhuma trade precisou ser fechada por timeout');
  } else {
    console.log(`‚úÖ ${closedByTimeout} trades fechadas por timeout`);
  }

  // 3. An√°lise de Performance por S√≠mbolo
  console.log('\nüìä 3. AN√ÅLISE DE PERFORMANCE POR S√çMBOLO');
  console.log('-'.repeat(40));
  
  const symbolStats = {};
  tradesData?.forEach(trade => {
    if (!symbolStats[trade.symbol]) {
      symbolStats[trade.symbol] = {
        total: 0,
        wins: 0,
        losses: 0,
        totalPnL: 0,
        avgConfidence: 0,
        confidenceSum: 0,
        recommendations: []
      };
    }
    
    symbolStats[trade.symbol].total++;
    symbolStats[trade.symbol].totalPnL += parseFloat(trade.pnl || 0);
    symbolStats[trade.symbol].confidenceSum += parseFloat(trade.confidence || 0);
    
    if (trade.status === 'closed') {
      if (parseFloat(trade.pnl || 0) > 0) {
        symbolStats[trade.symbol].wins++;
      } else if (parseFloat(trade.pnl || 0) < 0) {
        symbolStats[trade.symbol].losses++;
      }
    }
  });
  
  // Gerar recomenda√ß√µes por s√≠mbolo
  Object.entries(symbolStats).forEach(([symbol, stats]) => {
    stats.avgConfidence = stats.confidenceSum / stats.total;
    const closedCount = stats.wins + stats.losses;
    const winRate = closedCount > 0 ? (stats.wins / closedCount) * 100 : 0;
    
    console.log(`üìä ${symbol}:`);
    console.log(`   Total: ${stats.total} | Wins: ${stats.wins} | Losses: ${stats.losses}`);
    console.log(`   Win Rate: ${winRate.toFixed(2)}% | P&L: $${stats.totalPnL.toFixed(4)}`);
    console.log(`   Confian√ßa M√©dia: ${stats.avgConfidence.toFixed(2)}%`);
    
    // Gerar recomenda√ß√µes espec√≠ficas
    if (winRate < 40 && closedCount > 5) {
      stats.recommendations.push('üî¥ EVITAR - Win rate muito baixo');
    } else if (winRate > 60 && closedCount > 5) {
      stats.recommendations.push('üü¢ PRIORIZAR - Win rate excelente');
    }
    
    if (stats.totalPnL < -0.05) {
      stats.recommendations.push('üî¥ EVITAR - P&L negativo significativo');
    } else if (stats.totalPnL > 0.1) {
      stats.recommendations.push('üü¢ PRIORIZAR - P&L positivo significativo');
    }
    
    if (stats.avgConfidence < 0.3) {
      stats.recommendations.push('‚ö†Ô∏è MELHORAR - Confian√ßa baixa nos sinais');
    }
    
    if (stats.recommendations.length > 0) {
      console.log(`   Recomenda√ß√µes: ${stats.recommendations.join(', ')}`);
    }
    console.log('');
  });

  // 4. Implementar Filtros de Qualidade
  console.log('\nüìä 4. IMPLEMENTA√á√ÉO DE FILTROS DE QUALIDADE');
  console.log('-'.repeat(40));
  
  const qualityFilters = {
    minWinRate: 45,        // M√≠nimo 45% de win rate
    minConfidence: 0.4,    // M√≠nimo 40% de confian√ßa
    maxDrawdown: 15,       // M√°ximo 15% de drawdown
    minProfitFactor: 1.2   // M√≠nimo 1.2 de profit factor
  };
  
  console.log('üîß Filtros de qualidade implementados:');
  console.log(`   Win Rate M√≠nimo: ${qualityFilters.minWinRate}%`);
  console.log(`   Confian√ßa M√≠nima: ${(qualityFilters.minConfidence * 100).toFixed(1)}%`);
  console.log(`   Drawdown M√°ximo: ${qualityFilters.maxDrawdown}%`);
  console.log(`   Profit Factor M√≠nimo: ${qualityFilters.minProfitFactor}`);

  // 5. Implementar Gest√£o de Risco Melhorada
  console.log('\nüìä 5. IMPLEMENTA√á√ÉO DE GEST√ÉO DE RISCO MELHORADA');
  console.log('-'.repeat(40));
  
  const riskManagementRules = {
    maxPositionsPerSymbol: 2,     // M√°ximo 2 posi√ß√µes por s√≠mbolo
    maxTotalPositions: 8,         // M√°ximo 8 posi√ß√µes totais
    positionSizePercent: 5,       // M√°ximo 5% do capital por posi√ß√£o
    stopLossPercent: 2,           // Stop loss em 2%
    takeProfitPercent: 4,         // Take profit em 4% (R/R 1:2)
    maxDailyLoss: 3              // M√°ximo 3% de perda por dia
  };
  
  console.log('üîß Regras de gest√£o de risco implementadas:');
  console.log(`   M√°x. Posi√ß√µes por S√≠mbolo: ${riskManagementRules.maxPositionsPerSymbol}`);
  console.log(`   M√°x. Posi√ß√µes Totais: ${riskManagementRules.maxTotalPositions}`);
  console.log(`   Tamanho da Posi√ß√£o: ${riskManagementRules.positionSizePercent}%`);
  console.log(`   Stop Loss: ${riskManagementRules.stopLossPercent}%`);
  console.log(`   Take Profit: ${riskManagementRules.takeProfitPercent}%`);
  console.log(`   Perda M√°xima Di√°ria: ${riskManagementRules.maxDailyLoss}%`);

  // 6. Implementar An√°lise T√©cnica Robusta
  console.log('\nüìä 6. IMPLEMENTA√á√ÉO DE AN√ÅLISE T√âCNICA ROBUSTA');
  console.log('-'.repeat(40));
  
  const technicalIndicators = {
    rsi: { period: 14, overbought: 70, oversold: 30 },
    macd: { fast: 12, slow: 26, signal: 9 },
    bollinger: { period: 20, stdDev: 2 },
    ema: { periods: [9, 21, 50] },
    volume: { minVolumeRatio: 1.2 },
    supportResistance: { lookback: 50 }
  };
  
  console.log('üîß Indicadores t√©cnicos configurados:');
  console.log(`   RSI: ${technicalIndicators.rsi.period} per√≠odos (${technicalIndicators.rsi.oversold}-${technicalIndicators.rsi.overbought})`);
  console.log(`   MACD: ${technicalIndicators.macd.fast}/${technicalIndicators.macd.slow}/${technicalIndicators.macd.signal}`);
  console.log(`   Bollinger Bands: ${technicalIndicators.bollinger.period} per√≠odos, ${technicalIndicators.bollinger.stdDev}œÉ`);
  console.log(`   EMAs: ${technicalIndicators.ema.periods.join(', ')} per√≠odos`);
  console.log(`   Volume: M√≠nimo ${technicalIndicators.volume.minVolumeRatio}x da m√©dia`);
  console.log(`   S/R: ${technicalIndicators.supportResistance.lookback} per√≠odos de lookback`);

  // 7. Salvar Configura√ß√µes de Melhoria
  const improvementConfig = {
    timestamp: new Date().toISOString(),
    qualityFilters,
    riskManagementRules,
    technicalIndicators,
    symbolRecommendations: symbolStats,
    tradesCorrected: {
      confidenceFixed: abnormalConfidenceTrades.length,
      timeoutClosed: closedByTimeout
    }
  };
  
  fs.writeFileSync('improvement_config.json', JSON.stringify(improvementConfig, null, 2));
  console.log('\n‚úÖ Configura√ß√µes de melhoria salvas em improvement_config.json');

  // 8. Resumo das Melhorias
  console.log('\nüìä 8. RESUMO DAS MELHORIAS IMPLEMENTADAS');
  console.log('-'.repeat(40));
  
  console.log('‚úÖ Corre√ß√£o de confian√ßa anormal');
  console.log('‚úÖ Timeout autom√°tico para trades abertas');
  console.log('‚úÖ An√°lise de performance por s√≠mbolo');
  console.log('‚úÖ Filtros de qualidade implementados');
  console.log('‚úÖ Gest√£o de risco melhorada');
  console.log('‚úÖ An√°lise t√©cnica robusta configurada');
  console.log('‚úÖ Recomenda√ß√µes espec√≠ficas por s√≠mbolo');
  
  console.log('\nüéØ PR√ìXIMOS PASSOS:');
  console.log('1. Implementar os filtros de qualidade no c√≥digo');
  console.log('2. Aplicar as regras de gest√£o de risco');
  console.log('3. Integrar os indicadores t√©cnicos');
  console.log('4. Monitorar performance com as novas regras');
  console.log('5. Ajustar par√¢metros baseado nos resultados');
}

implementImprovements().catch(console.error);
