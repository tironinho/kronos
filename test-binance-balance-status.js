async function testBinanceBalanceAPI() {
  console.log('üß™ TESTANDO API DE SALDO DA BINANCE\n');
  console.log('============================================================\n');

  try {
    // Testar API de saldo da Binance
    console.log('1Ô∏è‚É£ TESTANDO API DE SALDO DA BINANCE...');
    const response = await fetch('http://localhost:3000/api/binance/balance');
    
    if (response.ok) {
      const data = await response.json();
      console.log('   ‚úÖ API de saldo funcionando');
      console.log(`   Status: ${data.status}`);
      
      if (data.status === 'success') {
        const balanceData = data.data;
        console.log(`   üí∞ Saldo Total: $${balanceData.totalBalance}`);
        console.log(`   üí∞ Saldo Spot: $${balanceData.spot.balance}`);
        console.log(`   üí∞ Saldo Futures: $${balanceData.futures.balance}`);
        console.log(`   üìä Total de Ativos: ${balanceData.balances?.length || 0}`);
        console.log(`   üîí Status Trading: ${balanceData.canTrade ? '‚úÖ ATIVO' : '‚ùå BLOQUEADO'}`);
        console.log(`   üí∏ Pode Sacar: ${balanceData.canWithdraw ? '‚úÖ Sim' : '‚ùå N√£o'}`);
        console.log(`   üí∞ Pode Depositar: ${balanceData.canDeposit ? '‚úÖ Sim' : '‚ùå N√£o'}`);
        console.log(`   üè¶ Tipo de Conta: ${balanceData.accountType}`);
        
        // Mostrar detalhes dos saldos
        if (balanceData.balances && balanceData.balances.length > 0) {
          console.log('\n   üìã Detalhes dos Saldos:');
          balanceData.balances.forEach((bal, idx) => {
            if (parseFloat(bal.total) > 0) {
              console.log(`     ${bal.asset}: ${bal.total} (Livre: ${bal.free}, Bloqueado: ${bal.locked})`);
            }
          });
        } else {
          console.log('\n   ‚ö†Ô∏è Nenhum saldo encontrado');
        }
        
        // An√°lise do status
        console.log('\n   üîç AN√ÅLISE DO STATUS:');
        if (!balanceData.canTrade) {
          console.log('   ‚ùå TRADING BLOQUEADO - Poss√≠veis causas:');
          if (balanceData.totalBalance === 0) {
            console.log('     - Saldo insuficiente (Total: $0.00)');
          }
          if (balanceData.spot.balance === 0 && balanceData.futures.balance === 0) {
            console.log('     - Sem saldo em Spot e Futures');
          }
          console.log('     - Conta pode estar restrita');
          console.log('     - API keys podem n√£o ter permiss√µes de trading');
        } else {
          console.log('   ‚úÖ TRADING ATIVO - Sistema pode executar trades');
        }
        
      } else {
        console.log(`   ‚ùå Erro na API: ${data.message}`);
      }
    } else {
      console.log(`   ‚ùå Erro HTTP: ${response.status}`);
      const errorText = await response.text();
      console.log(`   Erro: ${errorText}`);
    }

    console.log('\n‚úÖ TESTE CONCLU√çDO!\n');

    console.log('üìã RESUMO DAS CORRE√á√ïES:');
    console.log('   ‚úÖ API agora retorna canTrade, canWithdraw, canDeposit');
    console.log('   ‚úÖ Convers√£o correta dos balances da Binance');
    console.log('   ‚úÖ Verifica√ß√£o de permiss√µes Spot e Futures');
    console.log('   ‚úÖ Status geral baseado em saldos dispon√≠veis');
    console.log('   ‚úÖ Logs detalhados para debug\n');

    console.log('üéØ PR√ìXIMOS PASSOS:');
    console.log('   1. Verificar se h√° saldo na conta Binance');
    console.log('   2. Confirmar que as API keys t√™m permiss√µes de trading');
    console.log('   3. Recarregar a p√°gina para ver o status atualizado');
    console.log('   4. Se ainda estiver bloqueado, verificar logs do servidor');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

testBinanceBalanceAPI();
